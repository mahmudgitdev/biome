{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"L:\\\\ReactNative\\\\biome\\\\node_modules\\\\react-native-multiple-choice-picker\\\\src\\\\MultipleChoice\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport DefaultTouchableComponent from \"./DefaultTouchableComponent\";\n\nvar MultipleChoice = function (_Component) {\n  _inherits(MultipleChoice, _Component);\n\n  var _super = _createSuper(MultipleChoice);\n\n  function MultipleChoice() {\n    var _this;\n\n    _classCallCheck(this, MultipleChoice);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.renderCustomItem = function (renderCustomItem) {\n      return React.createElement(View, {\n        style: {\n          marginLeft: 8\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 10\n        }\n      }, renderCustomItem());\n    };\n\n    _this.renderDefaultItem = function (index, _onPress, color, fontWeight, item) {\n      return React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          _onPress(index);\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 10\n        }\n      }, React.createElement(Text, {\n        style: {\n          color: color,\n          marginLeft: 8,\n          fontWeight: fontWeight\n        },\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 4\n        }\n      }, item));\n    };\n\n    return _this;\n  }\n\n  _createClass(MultipleChoice, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          style = _this$props.style,\n          direction = _this$props.direction,\n          chosenColor = _this$props.chosenColor,\n          TouchableComponent = _this$props.TouchableComponent,\n          choices = _this$props.choices,\n          chosenTextColor = _this$props.chosenTextColor,\n          _onPress2 = _this$props.onPress,\n          chosenIndex = _this$props.chosenIndex,\n          outerRound = _this$props.outerRound,\n          renderCustomItem = _this$props.renderCustomItem,\n          customIndex = _this$props.customIndex,\n          innerRound = outerRound * 3.5 / 5,\n          isColumnDirection = direction === 'column',\n          columnStyle = {\n        flexDirection: 'row',\n        marginTop: 16\n      },\n          itemViewStyle = isColumnDirection ? columnStyle : styles.itemView;\n      return React.createElement(View, {\n        style: [styles.container, style, {\n          flexDirection: direction\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 4\n        }\n      }, choices.map(function (item, index) {\n        var isChosen = chosenIndex === index,\n            defaultTextColor = isChosen ? chosenTextColor : 'black',\n            fontWeight = isChosen ? 'bold' : 'normal';\n        return React.createElement(View, {\n          key: index,\n          style: itemViewStyle,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }\n        }, React.createElement(TouchableComponent, {\n          size: outerRound,\n          innerChosenSize: innerRound,\n          onPress: function onPress() {\n            _onPress2(index);\n          },\n          isChosen: isChosen,\n          innerChosenColor: chosenColor,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 7\n          }\n        }), index === customIndex ? _this2.renderCustomItem(renderCustomItem) : _this2.renderDefaultItem(index, _onPress2, defaultTextColor, fontWeight, item));\n      }));\n    }\n  }]);\n\n  return MultipleChoice;\n}(Component);\n\nMultipleChoice.defaultProps = {\n  style: {},\n  direction: 'row',\n  chosenColor: '#e2641e',\n  TouchableComponent: DefaultTouchableComponent,\n  choices: [],\n  chosenIndex: 0,\n  chosenTextColor: '#e2641e',\n  onPress: function onPress() {},\n  outerRound: 24,\n  innerRound: 24 * 3.5 / 5,\n  renderCustomItem: function renderCustomItem() {},\n  customIndex: -1\n};\nexport { MultipleChoice as default };\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    paddingHorizontal: 16\n  },\n  itemView: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["L:/ReactNative/biome/node_modules/react-native-multiple-choice-picker/src/MultipleChoice/index.js"],"names":["React","Component","DefaultTouchableComponent","MultipleChoice","renderCustomItem","marginLeft","renderDefaultItem","index","onPress","color","fontWeight","item","props","style","direction","chosenColor","TouchableComponent","choices","chosenTextColor","chosenIndex","outerRound","customIndex","innerRound","isColumnDirection","columnStyle","flexDirection","marginTop","itemViewStyle","styles","itemView","container","map","isChosen","defaultTextColor","defaultProps","StyleSheet","create","justifyContent","paddingHorizontal","alignItems"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Text, View, TouchableOpacity, StyleSheet } from 'react-native';\nimport DefaultTouchableComponent from './DefaultTouchableComponent';\n\ntype Props = {\n\tstyle?: any,\n\tdirection?: string,\n\tchosenColor?: string,\n\tTouchableComponent?: any,\n\tchoices: any,\n\tchosenIndex?: number,\n\tchosenTextColor?: string,\n\tonPress?: any,\n\tinnerRound?: number,\n\touterRound?: number,\n\trenderCustomItem?: any,\n\tcustomIndex?: number\n};\n\nexport default class MultipleChoice extends Component {\n\tprops: Props;\n\n\tstatic defaultProps = {\n\t\tstyle: {},\n\t\tdirection: 'row',\n\t\tchosenColor: '#e2641e',\n\t\tTouchableComponent: DefaultTouchableComponent,\n\t\tchoices: [],\n\t\tchosenIndex: 0,\n\t\tchosenTextColor: '#e2641e',\n\t\tonPress: () => {},\n\t\touterRound: 24,\n\t\tinnerRound: 24 * 3.5 / 5,\n\t\trenderCustomItem: () => {\n\t\t},\n\t\tcustomIndex: -1\n\t};\n\n\trender() {\n\t\tconst {\n\t\t\t\tstyle, direction, chosenColor, TouchableComponent, choices, chosenTextColor,\n\t\t\t\tonPress, chosenIndex, outerRound, renderCustomItem, customIndex\n\t\t\t} = this.props,\n\t\t\tinnerRound = outerRound * 3.5 / 5,\n\t\t\tisColumnDirection = direction === 'column',\n\t\t\tcolumnStyle = {\n\t\t\t\tflexDirection: 'row',\n\t\t\t\tmarginTop: 16\n\t\t\t},\n\t\t\titemViewStyle = isColumnDirection ? columnStyle : styles.itemView;\n\t\treturn (\n\t\t\t<View style={[styles.container, style, { flexDirection: direction }]}>\n\t\t\t\t{choices.map((item, index) => {\n\t\t\t\t\tconst isChosen = chosenIndex === index,\n\t\t\t\t\t\tdefaultTextColor = isChosen ? chosenTextColor : 'black',\n\t\t\t\t\t\tfontWeight = isChosen ? 'bold' : 'normal';\n\t\t\t\t\treturn <View\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\tstyle={itemViewStyle}>\n\t\t\t\t\t\t<TouchableComponent\n\t\t\t\t\t\t\tsize={outerRound}\n\t\t\t\t\t\t\tinnerChosenSize={innerRound}\n\t\t\t\t\t\t\tonPress={() => {\n\t\t\t\t\t\t\t\tonPress(index);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tisChosen={isChosen}\n\t\t\t\t\t\t\tinnerChosenColor={chosenColor}/>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tindex === customIndex\n\t\t\t\t\t\t\t\t? this.renderCustomItem(renderCustomItem)\n\t\t\t\t\t\t\t\t: this.renderDefaultItem(index, onPress, defaultTextColor, fontWeight, item)\n\t\t\t\t\t\t}\n\t\t\t\t\t</View>;\n\t\t\t\t})}\n\t\t\t</View>\n\t\t);\n\t}\n\n\trenderCustomItem = (renderCustomItem) => {\n\t\treturn <View style={{\n\t\t\tmarginLeft: 8\n\t\t}}>\n\t\t\t{ renderCustomItem() }\n\t\t</View>;\n\t};\n\n\trenderDefaultItem = (index, onPress, color, fontWeight, item) => {\n\t\treturn <TouchableOpacity onPress={() => {\n\t\t\tonPress(index);\n\t\t}}>\n\t\t\t<Text\n\t\t\t\tstyle={{\n\t\t\t\t\tcolor,\n\t\t\t\t\tmarginLeft: 8,\n\t\t\t\t\tfontWeight\n\t\t\t\t}}>{item}</Text>\n\t\t</TouchableOpacity>;\n\t}\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'space-around',\n\t\tpaddingHorizontal: 16\n\t},\n\titemView: {\n\t\tflexDirection: 'row',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t}\n});\n"]},"metadata":{},"sourceType":"module"}