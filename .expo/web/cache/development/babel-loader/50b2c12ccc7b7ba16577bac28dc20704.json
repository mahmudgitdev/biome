{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"L:\\\\ReactNative\\\\biome\\\\src\\\\screens\\\\ModelTestScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport questionApi from \"../api/baseApi\";\nimport { COLORS, SIZES } from \"../constants\";\n\nvar ModelTestScreen = function ModelTestScreen(_ref) {\n  var route = _ref.route;\n  var id = route.params.tropicsId;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      questions = _useState2[0],\n      setQuestions = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsloading = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedId = _useState6[0],\n      setSelectedId = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      optionId = _useState8[0],\n      setOptionId = _useState8[1];\n\n  var loadQuestions = function loadQuestions() {\n    var _await$questionApi$ge, data;\n\n    return _regeneratorRuntime.async(function loadQuestions$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(questionApi.get(\"/get-questions/\" + id));\n\n          case 2:\n            _await$questionApi$ge = _context.sent;\n            data = _await$questionApi$ge.data;\n            setQuestions(data);\n            setIsloading(false);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleOption = function handleOption(id) {\n    setSelectedId([].concat(_toConsumableArray(selectedId), [id]));\n    alert(selectedId);\n    setOptionId(id);\n  };\n\n  useEffect(function () {\n    loadQuestions();\n  }, []);\n\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    var backgroundColor = item.options.find(function (item) {\n      return item._id == optionId;\n    }) ? \"red\" : \"gray\";\n    return React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }, React.createElement(View, {\n      style: _objectSpread({\n        flex: 1,\n        flexDirection: 'column',\n        margin: 5,\n        paddingVertical: 15,\n        paddingHorizontal: 18,\n        borderRadius: 5,\n        backgroundColor: COLORS.white\n      }, styles.shadow),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }), React.createElement(Text, {\n      style: {\n        fontWeight: 'bold',\n        fontSize: 15,\n        color: COLORS.black\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }\n    }, item.question), React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }\n    }, React.createElement(FlatList, {\n      data: item.options,\n      keyExtractor: function keyExtractor(item) {\n        return item._id;\n      },\n      renderItem: function renderItem(_ref3) {\n        var item = _ref3.item;\n        return React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            return handleOption(item._id);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }\n        }, React.createElement(View, {\n          style: {\n            flexDirection: 'row',\n            paddingVertical: 5,\n            alignItems: 'center'\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }\n        }, React.createElement(View, {\n          style: {\n            backgroundColor: backgroundColor,\n            width: 27,\n            height: 27,\n            borderRadius: 40,\n            marginRight: 6,\n            justifyContent: 'center'\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }\n        }, React.createElement(Text, {\n          style: {\n            alignSelf: 'center',\n            color: 'white'\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 29\n          }\n        }, item.qop)), React.createElement(Text, {\n          style: {\n            fontSize: 15\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 29\n          }\n        }, item.option)));\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }))));\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      justifyContent: 'flex-end',\n      alignItems: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontWeight: 'bold',\n      marginRight: 5\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, \"Answer Mode\")), isLoading ? React.createElement(ActivityIndicator, {\n    size: \"large\",\n    color: COLORS.blue,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 24\n    }\n  }) : React.createElement(FlatList, {\n    data: questions,\n    keyExtractor: function keyExtractor(item) {\n      return item._id;\n    },\n    renderItem: renderItem,\n    numColumns: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.lightGray2,\n    paddingVertical: 5\n  },\n  shadow: {\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 2,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 3\n  }\n});\nexport default ModelTestScreen;","map":{"version":3,"sources":["L:/ReactNative/biome/src/screens/ModelTestScreen.js"],"names":["React","useState","useEffect","useContext","questionApi","COLORS","SIZES","ModelTestScreen","route","id","params","tropicsId","questions","setQuestions","isLoading","setIsloading","selectedId","setSelectedId","optionId","setOptionId","loadQuestions","get","data","handleOption","alert","renderItem","item","backgroundColor","options","find","_id","flex","flexDirection","margin","paddingVertical","paddingHorizontal","borderRadius","white","styles","shadow","fontWeight","fontSize","color","black","question","alignItems","width","height","marginRight","justifyContent","alignSelf","qop","option","container","blue","StyleSheet","create","lightGray2","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation"],"mappings":"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","sourcesContent":["import React,{useState,useEffect,useContext} from 'react';\r\nimport { \r\n    View,\r\n    StyleSheet,\r\n    Text,\r\n    FlatList,\r\n    TouchableOpacity,\r\n    ActivityIndicator,\r\n    Switch,\r\n    ToastAndroid\r\n} from 'react-native';\r\nimport questionApi from '../api/baseApi';\r\nimport {COLORS, SIZES} from '../constants';\r\n\r\n\r\nconst ModelTestScreen = ({route})=>{\r\n    const id = route.params.tropicsId\r\n    const [questions,setQuestions] = useState([]);\r\n    const [isLoading,setIsloading] = useState(true);\r\n    const [selectedId,setSelectedId] = useState([]);\r\n    const [optionId,setOptionId] = useState(null);\r\n\r\n\r\n\r\n    const loadQuestions = async()=>{\r\n        const {data} = await questionApi.get(`/get-questions/${id}`);\r\n        setQuestions(data);\r\n        setIsloading(false);\r\n\r\n    }\r\n\r\n    const handleOption = (id)=>{\r\n        // alert(id)\r\n        setSelectedId([...selectedId,id]);\r\n        alert(selectedId);\r\n        setOptionId(id);\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n        loadQuestions();\r\n    },[]);\r\n\r\n\r\n\r\n    const renderItem = ({item})=>{\r\n\r\n        // const backgroundColor = item.options._id === selectedId?\"red\":\"gray\";\r\n        const backgroundColor = item.options.find((item)=>item._id == optionId)?\"red\":\"gray\";\r\n        return(\r\n            <View>\r\n            <View style={{\r\n                flex: 1,\r\n                flexDirection: 'column',\r\n                margin: 5,\r\n                paddingVertical: 15,\r\n                paddingHorizontal: 18,\r\n                borderRadius: 5,\r\n                backgroundColor: COLORS.white,\r\n                ...styles.shadow\r\n\r\n            }}>\r\n                <View>\r\n                </View>\r\n                <Text style={{fontWeight:'bold',fontSize:15,color:COLORS.black}}>{item.question}</Text>\r\n                <View>\r\n                <FlatList \r\n                data={item.options}\r\n                keyExtractor={item=>item._id}\r\n                // extraData={selectedId}\r\n                renderItem={({item})=>{\r\n                    return(\r\n                        <TouchableOpacity\r\n                        onPress={()=>handleOption(item._id)}\r\n                        >\r\n                        <View style={{flexDirection:'row',paddingVertical:5,alignItems:'center'}}>\r\n                            <View style={{\r\n                                backgroundColor:backgroundColor,\r\n                                width:27,\r\n                                height:27,\r\n                                borderRadius:40,\r\n                                marginRight:6,\r\n                                justifyContent:'center'\r\n                                }}>\r\n                            <Text style={{\r\n                                alignSelf:'center',\r\n                                color:'white',\r\n                            }}>{item.qop}</Text>\r\n                            </View>\r\n                            <Text style={{fontSize:15}}>{item.option}</Text>\r\n                        </View>\r\n                        </TouchableOpacity>\r\n                    )\r\n                }}\r\n                />\r\n            </View>\r\n            </View>\r\n                \r\n        </View>\r\n        )\r\n\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <View style={styles.container}>\r\n            <View style={{flexDirection:'row',justifyContent:'flex-end',alignItems:'center'}}>\r\n                <Text style={{fontWeight:'bold',marginRight:5}}>Answer Mode</Text>\r\n            </View>\r\n            {isLoading?<ActivityIndicator size=\"large\" color={COLORS.blue} />:\r\n            <FlatList\r\n            data={questions}\r\n            keyExtractor={item=>item._id}\r\n            renderItem={renderItem}\r\n            numColumns={1}\r\n            />\r\n            }\r\n        </View>\r\n    )\r\n}\r\nconst styles = StyleSheet.create({\r\n    container:{\r\n        flex:1,\r\n        backgroundColor:COLORS.lightGray2,\r\n        paddingVertical:5\r\n    },\r\n    shadow: {\r\n        shadowColor: \"#000\",\r\n        shadowOffset: {\r\n            width: 2,\r\n            height: 2,\r\n        },\r\n        shadowOpacity: 0.25,\r\n        shadowRadius: 3.84,\r\n        elevation: 3,\r\n    }\r\n})\r\nexport default ModelTestScreen;"]},"metadata":{},"sourceType":"module"}