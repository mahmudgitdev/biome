{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Screen, screensEnabled, shouldUseActivityState } from 'react-native-screens';\nvar FAR_FAR_AWAY = 30000;\nexport default function ResourceSavingScene(_ref) {\n  var isVisible = _ref.isVisible,\n      children = _ref.children,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, [\"isVisible\", \"children\", \"style\"]);\n\n  if (screensEnabled !== null && screensEnabled !== void 0 && screensEnabled() && Platform.OS !== 'web') {\n    if (shouldUseActivityState) {\n      return React.createElement(Screen, _extends({\n        activityState: isVisible ? 2 : 0,\n        style: style\n      }, rest), children);\n    } else {\n      return React.createElement(Screen, _extends({\n        active: isVisible ? 1 : 0,\n        style: style\n      }, rest), children);\n    }\n  }\n\n  return React.createElement(View, _extends({\n    hidden: !isVisible,\n    style: [styles.container, Platform.OS === 'web' ? {\n      display: isVisible ? 'flex' : 'none'\n    } : {\n      overflow: 'hidden'\n    }, style],\n    collapsable: false,\n    removeClippedSubviews: Platform.OS === 'ios' ? !isVisible : true,\n    pointerEvents: isVisible ? 'auto' : 'none'\n  }, rest), React.createElement(View, {\n    style: Platform.OS === 'web' ? null : isVisible ? styles.attached : styles.detached\n  }, children));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  attached: {\n    flex: 1\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});","map":{"version":3,"sources":["ResourceSavingScene.tsx"],"names":["FAR_FAR_AWAY","rest","screensEnabled","Platform","isVisible","style","styles","display","overflow","detached","container","flex","attached","top"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;AAEA,SAAA,MAAA,EAAA,cAAA,EAAA,sBAAA,QAAA,sBAAA;AAcA,IAAMA,YAAY,GAAlB,KAAA;AAEA,eAAe,SAAA,mBAAA,OAKL;AAAA,MALkC,SAKlC,QALkC,SAKlC;AAAA,MALkC,QAKlC,QALkC,QAKlC;AAAA,MALkC,KAKlC,QALkC,KAKlC;AAAA,MADLC,IACK;;AAER,MAAIC,cAAc,KAAdA,IAAAA,IAAAA,cAAc,KAAA,KAAdA,CAAAA,IAAAA,cAAc,EAAdA,IAAsBC,QAAQ,CAARA,EAAAA,KAA1B,KAAA,EAAiD;AAC/C,QAAA,sBAAA,EAA4B;AAC1B,aAEE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AAAQ,QAAA,aAAa,EAAEC,SAAS,GAAA,CAAA,GAAhC,CAAA;AAA0C,QAAA,KAAK,EAAEC;AAAjD,OAAA,EAAA,IAAA,CAAA,EAAA,QAAA,CAFF;AADF,KAAA,MAOO;AACL,aAEE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AAAQ,QAAA,MAAM,EAAED,SAAS,GAAA,CAAA,GAAzB,CAAA;AAAmC,QAAA,KAAK,EAAEC;AAA1C,OAAA,EAAA,IAAA,CAAA,EAAA,QAAA,CAFF;AAMD;AACF;;AAED,SACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAEE,IAAA,MAAM,EAAE,CAFV,SAAA;AAGE,IAAA,KAAK,EAAE,CACLC,MAAM,CADD,SAAA,EAEL,QAAQ,CAAR,EAAA,KAAA,KAAA,GACI;AAAEC,MAAAA,OAAO,EAAEH,SAAS,GAAA,MAAA,GAAY;AAAhC,KADJ,GAEI;AAAEI,MAAAA,QAAQ,EAAE;AAAZ,KAJC,EAHT,KAGS,CAHT;AAUE,IAAA,WAAW,EAVb,KAAA;AAWE,IAAA,qBAAqB,EAGnBL,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,GAAwB,CAAxBA,SAAAA,GAdJ,IAAA;AAgBE,IAAA,aAAa,EAAEC,SAAS,GAAA,MAAA,GAAY;AAhBtC,GAAA,EAAA,IAAA,CAAA,EAmBE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,IAAA,KAAK,EACHD,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,GAAAA,IAAAA,GAEIC,SAAS,GACTE,MAAM,CADG,QAAA,GAETA,MAAM,CAACG;AANf,GAAA,EApBJ,QAoBI,CAnBF,CADF;AAiCD;AAED,IAAMH,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BI,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE;AADG,GADoB;AAI/BC,EAAAA,QAAQ,EAAE;AACRD,IAAAA,IAAI,EAAE;AADE,GAJqB;AAO/BF,EAAAA,QAAQ,EAAE;AACRE,IAAAA,IAAI,EADI,CAAA;AAERE,IAAAA,GAAG,EAAEb;AAFG;AAPqB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport {\n  Screen,\n  screensEnabled,\n  // @ts-ignore\n  shouldUseActivityState,\n} from 'react-native-screens';\n\ntype Props = {\n  isVisible: boolean;\n  children: React.ReactNode;\n  enabled: boolean;\n  style?: any;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default function ResourceSavingScene({\n  isVisible,\n  children,\n  style,\n  ...rest\n}: Props) {\n  // react-native-screens is buggy on web\n  if (screensEnabled?.() && Platform.OS !== 'web') {\n    if (shouldUseActivityState) {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screen activityState={isVisible ? 2 : 0} style={style} {...rest}>\n          {children}\n        </Screen>\n      );\n    } else {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screen active={isVisible ? 1 : 0} style={style} {...rest}>\n          {children}\n        </Screen>\n      );\n    }\n  }\n\n  return (\n    <View\n      // @ts-expect-error: hidden exists on web, but not in React Native\n      hidden={!isVisible}\n      style={[\n        styles.container,\n        Platform.OS === 'web'\n          ? { display: isVisible ? 'flex' : 'none' }\n          : { overflow: 'hidden' },\n        style,\n      ]}\n      collapsable={false}\n      removeClippedSubviews={\n        // On iOS, set removeClippedSubviews to true only when not focused\n        // This is an workaround for a bug where the clipped view never re-appears\n        Platform.OS === 'ios' ? !isVisible : true\n      }\n      pointerEvents={isVisible ? 'auto' : 'none'}\n      {...rest}\n    >\n      <View\n        style={\n          Platform.OS === 'web'\n            ? null\n            : isVisible\n            ? styles.attached\n            : styles.detached\n        }\n      >\n        {children}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}