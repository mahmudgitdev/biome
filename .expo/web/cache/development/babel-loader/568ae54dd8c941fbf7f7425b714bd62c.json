{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"L:\\\\ReactNative\\\\biome\\\\src\\\\screens\\\\ModelTestScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport questionApi from \"../api/baseApi\";\nimport { COLORS, SIZES } from \"../constants\";\n\nvar ModelTestScreen = function ModelTestScreen(_ref) {\n  var route = _ref.route;\n  var id = route.params.tropicsId;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      questions = _useState2[0],\n      setQuestions = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsloading = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      score = _useState6[0],\n      setScore = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      currentQuestion = _useState8[0],\n      setCurrentQuestion = _useState8[1];\n\n  var _useState9 = useState('gray'),\n      _useState10 = _slicedToArray(_useState9, 2),\n      color = _useState10[0],\n      setColor = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      checked = _useState12[0],\n      setChecked = _useState12[1];\n\n  var loadQuestions = function loadQuestions() {\n    var _await$questionApi$ge, data;\n\n    return _regeneratorRuntime.async(function loadQuestions$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(questionApi.get(\"/get-questions/\" + id));\n\n          case 2:\n            _await$questionApi$ge = _context.sent;\n            data = _await$questionApi$ge.data;\n            setQuestions(data);\n            setIsloading(false);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleAnswer = function handleAnswer(isCorrect, qop) {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    var nextQuestion = currentQuestion + 1;\n\n    if (nextQuestion < questions.length) {\n      setTimeout(function () {\n        setCurrentQuestion(nextQuestion);\n      }, 1000);\n    } else {}\n  };\n\n  useEffect(function () {\n    loadQuestions();\n  }, []);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: {\n      paddingVertical: 6,\n      backgroundColor: COLORS.lightBlue\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontWeight: 'bold',\n      fontSize: 15,\n      alignSelf: 'center',\n      padding: 5,\n      color: COLORS.primary\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, \"Time Remaining : 20min\")), isLoading ? React.createElement(ActivityIndicator, {\n    size: \"large\",\n    color: COLORS.blue,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 20\n    }\n  }) : React.createElement(View, {\n    style: _objectSpread({\n      flex: 1,\n      flexDirection: 'column',\n      margin: 5,\n      paddingVertical: 15,\n      paddingHorizontal: 18,\n      borderRadius: 5,\n      backgroundColor: COLORS.white\n    }, styles.shadow),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: {\n      paddingVertical: 10\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontWeight: 'bold',\n      fontSize: 22,\n      color: COLORS.blue\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, \"Question \", currentQuestion + 1, \"/\", questions.length)), React.createElement(Text, {\n    style: {\n      fontWeight: 'bold',\n      fontSize: 20,\n      color: COLORS.primary\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, questions[currentQuestion].question), React.createElement(View, {\n    style: {\n      padding: 15\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, questions[currentQuestion].options.map(function (item) {\n    return React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return handleAnswer(item.isCorrect, item.qop);\n      },\n      style: {\n        flexDirection: 'row',\n        paddingVertical: 8,\n        alignItems: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 19\n      }\n    }, React.createElement(View, {\n      style: {\n        backgroundColor: checked ? COLORS.darkgreen : 'gray',\n        width: 33,\n        height: 33,\n        borderRadius: 40,\n        marginRight: 10,\n        justifyContent: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }\n    }, React.createElement(Text, {\n      style: {\n        alignSelf: 'center',\n        color: 'white',\n        fontSize: 18,\n        fontWeight: 'bold'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    }, item.qop)), React.createElement(Text, {\n      style: {\n        fontSize: 20,\n        fontWeight: '600',\n        color: COLORS.primary\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }\n    }, item.option));\n  }))));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.lightGray2\n  },\n  shadow: {\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 2,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 3\n  }\n});\nexport default ModelTestScreen;","map":{"version":3,"sources":["L:/ReactNative/biome/src/screens/ModelTestScreen.js"],"names":["React","useState","useEffect","useContext","questionApi","COLORS","SIZES","ModelTestScreen","route","id","params","tropicsId","questions","setQuestions","isLoading","setIsloading","score","setScore","currentQuestion","setCurrentQuestion","color","setColor","checked","setChecked","loadQuestions","get","data","handleAnswer","isCorrect","qop","nextQuestion","length","setTimeout","styles","container","paddingVertical","backgroundColor","lightBlue","fontWeight","fontSize","alignSelf","padding","primary","blue","flex","flexDirection","margin","paddingHorizontal","borderRadius","white","shadow","question","options","map","item","alignItems","darkgreen","width","height","marginRight","justifyContent","option","StyleSheet","create","lightGray2","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation"],"mappings":"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","sourcesContent":["import React,{useState,useEffect,useContext} from 'react';\r\nimport { \r\n    View,\r\n    StyleSheet,\r\n    Text,\r\n    FlatList,\r\n    TouchableOpacity,\r\n    ActivityIndicator,\r\n} from 'react-native';\r\nimport questionApi from '../api/baseApi';\r\nimport {COLORS, SIZES} from '../constants';\r\n\r\nconst ModelTestScreen = ({route})=>{\r\n    const id = route.params.tropicsId\r\n    const [questions,setQuestions] = useState([]);\r\n    const [isLoading,setIsloading] = useState(true);\r\n    const [score,setScore] =  useState(0);\r\n    const [currentQuestion,setCurrentQuestion] = useState(0);\r\n    const [color,setColor] = useState('gray');\r\n    const [checked,setChecked] = useState(false);\r\n\r\n    const loadQuestions = async()=>{\r\n        const {data} = await questionApi.get(`/get-questions/${id}`);\r\n        setQuestions(data);\r\n        setIsloading(false);\r\n\r\n    }\r\n\r\n    const handleAnswer = (isCorrect,qop)=>{\r\n        if(isCorrect){\r\n            setScore(score+1);\r\n        }\r\n        const nextQuestion = currentQuestion +1;\r\n\r\n        if(nextQuestion < questions.length){\r\n            setTimeout(()=>{\r\n                setCurrentQuestion(nextQuestion);\r\n                // setColor('gray')\r\n            },1000)\r\n        }else{\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    useEffect(()=>{\r\n        loadQuestions();\r\n    },[]);\r\n\r\n    return(\r\n        <View style={styles.container}>\r\n        <View style={{paddingVertical:6,backgroundColor:COLORS.lightBlue}}>\r\n            <Text style={{\r\n                fontWeight:'bold',\r\n                fontSize:15,\r\n                alignSelf:'center',\r\n                padding:5,\r\n                color:COLORS.primary\r\n            }}>Time Remaining : 20min</Text>\r\n        </View>\r\n        {isLoading?<ActivityIndicator size=\"large\" color={COLORS.blue} />:\r\n            <View style={{\r\n                flex: 1,\r\n                flexDirection: 'column',\r\n                margin: 5,\r\n                paddingVertical: 15,\r\n                paddingHorizontal: 18,\r\n                borderRadius: 5,\r\n                backgroundColor: COLORS.white,\r\n                ...styles.shadow\r\n\r\n            }}>\r\n            <View style={{paddingVertical:10}}>\r\n                <Text style={{\r\n                    fontWeight:'bold',\r\n                    fontSize:22,\r\n                    color:COLORS.blue\r\n                }}>Question {currentQuestion + 1}/{questions.length}</Text>\r\n            </View>\r\n            <Text style={{fontWeight:'bold',fontSize:20,color:COLORS.primary}}>{questions[currentQuestion].question}</Text>\r\n                <View style={{\r\n                    padding:15\r\n                }}>\r\n                {questions[currentQuestion].options.map((item)=>{\r\n                return(\r\n                  <TouchableOpacity\r\n                    onPress={()=>handleAnswer(item.isCorrect,item.qop)}\r\n                     style={{\r\n                        flexDirection:'row',\r\n                        paddingVertical:8,\r\n                        alignItems:'center',\r\n                        }}>\r\n                        <View style={{\r\n                            backgroundColor:checked?COLORS.darkgreen:'gray',\r\n                            width:33,\r\n                            height:33,\r\n                            borderRadius:40,\r\n                            marginRight:10,\r\n                            justifyContent:'center'\r\n                            }}>\r\n                        \r\n                        <Text style={{\r\n                            alignSelf:'center',\r\n                            color:'white',\r\n                            fontSize:18,\r\n                            fontWeight:'bold'\r\n                        }}>{item.qop}</Text>\r\n                        </View>\r\n                        <Text style={{\r\n                            fontSize:20,\r\n                            fontWeight:'600',\r\n                            color:COLORS.primary\r\n                            }}>{item.option}</Text>\r\n                </TouchableOpacity>\r\n                )\r\n                })}\r\n                </View>\r\n                    \r\n            </View>\r\n            }\r\n        </View>\r\n    )\r\n}\r\nconst styles = StyleSheet.create({\r\n    container:{\r\n        flex:1,\r\n        backgroundColor:COLORS.lightGray2,\r\n    },\r\n    shadow: {\r\n        shadowColor: \"#000\",\r\n        shadowOffset: {\r\n            width: 2,\r\n            height: 2,\r\n        },\r\n        shadowOpacity: 0.25,\r\n        shadowRadius: 3.84,\r\n        elevation: 3,\r\n    }\r\n})\r\nexport default ModelTestScreen;"]},"metadata":{},"sourceType":"module"}