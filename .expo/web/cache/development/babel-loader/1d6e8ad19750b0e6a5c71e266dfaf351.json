{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"L:\\\\ReactNative\\\\biome\\\\src\\\\screens\\\\QuestionScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport questionApi from \"../api/baseApi\";\nimport { COLORS } from \"../constants\";\nimport { SimpleLineIcons } from '@expo/vector-icons';\n\nvar QuestionScreen = function QuestionScreen(_ref) {\n  var route = _ref.route;\n  var id = route.params.tropicsId;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      questions = _useState2[0],\n      setQuestions = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsloading = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      showanswer = _useState6[0],\n      setShowanswer = _useState6[1];\n\n  var toggleSwitch = function toggleSwitch() {\n    return setShowanswer(function (previousState) {\n      return !previousState;\n    });\n  };\n\n  var loadQuestions = function loadQuestions() {\n    var _await$questionApi$ge, data;\n\n    return _regeneratorRuntime.async(function loadQuestions$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(questionApi.get(\"/get-questions/\" + id));\n\n          case 2:\n            _await$questionApi$ge = _context.sent;\n            data = _await$questionApi$ge.data;\n            setQuestions(data);\n            setIsloading(false);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    loadQuestions();\n  }, [0]);\n\n  var renderNote = function renderNote(describe) {\n    return React.createElement(Text, {\n      style: {\n        flexDirection: 'row',\n        justifyContent: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }\n    }, React.createElement(SimpleLineIcons, {\n      style: {\n        marginRight: 8\n      },\n      name: \"note\",\n      size: 21,\n      color: COLORS.yellow,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }\n    }), React.createElement(Text, {\n      style: {\n        color: COLORS.darkgray,\n        fontSize: 13,\n        alignItems: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }\n    }, describe));\n  };\n\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    return React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }, React.createElement(View, {\n      style: _objectSpread({\n        flex: 1,\n        flexDirection: 'column',\n        margin: 5,\n        paddingVertical: 15,\n        paddingHorizontal: 18,\n        borderRadius: 5,\n        backgroundColor: COLORS.white\n      }, styles.shadow),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: {\n        fontWeight: 'bold',\n        fontSize: 15,\n        color: COLORS.black\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, item.question), React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, React.createElement(FlatList, {\n      data: item.options,\n      keyExtractor: function keyExtractor(item) {\n        return item._id;\n      },\n      renderItem: function renderItem(_ref3) {\n        var item = _ref3.item;\n        return React.createElement(View, {\n          style: {\n            flexDirection: 'row',\n            paddingVertical: 5,\n            alignItems: 'center'\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }\n        }, React.createElement(View, {\n          style: {\n            backgroundColor: item.isCorrect && showanswer ? COLORS.darkgreen : 'gray',\n            width: 27,\n            height: 27,\n            borderRadius: 40,\n            marginRight: 6,\n            justifyContent: 'center'\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 29\n          }\n        }, React.createElement(Text, {\n          style: {\n            alignSelf: 'center',\n            color: 'white'\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 29\n          }\n        }, item.qop)), React.createElement(Text, {\n          style: {\n            fontSize: 15\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 29\n          }\n        }, item.option));\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    })), React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, item.describe ? renderNote(item.describe) : '')));\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      justifyContent: 'flex-end',\n      alignItems: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontWeight: 'bold',\n      marginRight: 5\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, \"Answer Mode\"), React.createElement(Switch, {\n    trackColor: {\n      false: \"#767577\",\n      true: \"#81b0ff\"\n    },\n    thumbColor: showanswer ? \"#f5dd4b\" : \"#f4f3f4\",\n    ios_backgroundColor: \"#3e3e3e\",\n    onValueChange: toggleSwitch,\n    value: showanswer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  })), isLoading ? React.createElement(ActivityIndicator, {\n    size: \"large\",\n    color: COLORS.yellow,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 24\n    }\n  }) : React.createElement(FlatList, {\n    data: questions,\n    keyExtractor: function keyExtractor(item) {\n      return item._id;\n    },\n    renderItem: renderItem,\n    numColumns: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.lightGray2,\n    paddingVertical: 5\n  },\n  shadow: {\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 2,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 3\n  }\n});\nexport default QuestionScreen;","map":{"version":3,"sources":["L:/ReactNative/biome/src/screens/QuestionScreen.js"],"names":["React","useState","useEffect","questionApi","COLORS","SimpleLineIcons","QuestionScreen","route","id","params","tropicsId","questions","setQuestions","isLoading","setIsloading","showanswer","setShowanswer","toggleSwitch","previousState","loadQuestions","get","data","renderNote","describe","flexDirection","justifyContent","marginRight","yellow","color","darkgray","fontSize","alignItems","renderItem","item","flex","margin","paddingVertical","paddingHorizontal","borderRadius","backgroundColor","white","styles","shadow","fontWeight","black","question","options","_id","isCorrect","darkgreen","width","height","alignSelf","qop","option","container","false","true","StyleSheet","create","lightGray2","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport { \r\n    View,\r\n    StyleSheet,\r\n    Text,\r\n    FlatList,\r\n    TouchableOpacity,\r\n    ActivityIndicator,\r\n    Switch\r\n} from 'react-native';\r\nimport questionApi from '../api/baseApi';\r\nimport {COLORS} from '../constants';\r\nimport { SimpleLineIcons } from '@expo/vector-icons';\r\nconst QuestionScreen = ({route})=>{\r\n    const id = route.params.tropicsId\r\n    const [questions,setQuestions] = useState([]);\r\n    const [isLoading,setIsloading] = useState(true);\r\n    const [showanswer,setShowanswer] = useState(false)\r\n\r\n    const toggleSwitch = () => setShowanswer(previousState => !previousState);\r\n\r\n\r\n\r\n\r\n    const loadQuestions = async()=>{\r\n        const {data} = await questionApi.get(`/get-questions/${id}`);\r\n        setQuestions(data);\r\n        setIsloading(false);\r\n\r\n    }\r\n    useEffect(()=>{\r\n        loadQuestions();\r\n    },[0]);\r\n\r\n    const renderNote=(describe)=>{\r\n        return(\r\n            <Text style={{flexDirection:'row',justifyContent:'center'}}>\r\n                <SimpleLineIcons style={{marginRight:8}} name=\"note\" size={21} color={COLORS.yellow} />\r\n                <Text style={{color:COLORS.darkgray,fontSize:13,alignItems:'center'}}>{describe}</Text>\r\n            </Text>\r\n        )\r\n    }\r\n\r\n    const renderItem = ({item})=>{\r\n        return(\r\n            <View>\r\n            <View style={{\r\n                flex: 1,\r\n                flexDirection: 'column',\r\n                margin: 5,\r\n                paddingVertical: 15,\r\n                paddingHorizontal: 18,\r\n                borderRadius: 5,\r\n                backgroundColor: COLORS.white,\r\n                ...styles.shadow\r\n\r\n            }}>\r\n                <Text style={{fontWeight:'bold',fontSize:15,color:COLORS.black}}>{item.question}</Text>\r\n            <View>\r\n                <FlatList \r\n                data={item.options}\r\n                keyExtractor={item=>item._id}\r\n                renderItem={({item})=>{\r\n                    return(\r\n                        <View style={{flexDirection:'row',paddingVertical:5,alignItems:'center'}}>\r\n                            <View style={{\r\n                                backgroundColor:item.isCorrect && showanswer?COLORS.darkgreen:'gray',\r\n                                width:27,\r\n                                height:27,\r\n                                borderRadius:40,\r\n                                marginRight:6,\r\n                                justifyContent:'center'\r\n                                }}>\r\n                            <Text style={{\r\n                                alignSelf:'center',\r\n                                color:'white',\r\n                            }}>{item.qop}</Text>\r\n                            </View>\r\n                            <Text style={{fontSize:15}}>{item.option}</Text>\r\n                        </View>\r\n                    )\r\n                }}\r\n                />\r\n            </View>\r\n            <Text>{item.describe?renderNote(item.describe):''}</Text>\r\n            </View>\r\n                \r\n        </View>\r\n        )\r\n\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <View style={styles.container}>\r\n            <View style={{flexDirection:'row',justifyContent:'flex-end',alignItems:'center'}}>\r\n                <Text style={{fontWeight:'bold',marginRight:5}}>Answer Mode</Text>\r\n            <Switch\r\n                trackColor={{ false: \"#767577\", true: \"#81b0ff\" }}\r\n                thumbColor={showanswer ? \"#f5dd4b\" : \"#f4f3f4\"}\r\n                ios_backgroundColor=\"#3e3e3e\"\r\n                onValueChange={toggleSwitch}\r\n                value={showanswer}\r\n            />\r\n            </View>\r\n            {isLoading?<ActivityIndicator size=\"large\" color={COLORS.yellow} />:\r\n            <FlatList\r\n            data={questions}\r\n            keyExtractor={item=>item._id}\r\n            renderItem={renderItem}\r\n            numColumns={1}\r\n            />\r\n            }\r\n        </View>\r\n    )\r\n}\r\nconst styles = StyleSheet.create({\r\n    container:{\r\n        flex:1,\r\n        backgroundColor:COLORS.lightGray2,\r\n        paddingVertical:5\r\n    },\r\n    shadow: {\r\n        shadowColor: \"#000\",\r\n        shadowOffset: {\r\n            width: 2,\r\n            height: 2,\r\n        },\r\n        shadowOpacity: 0.25,\r\n        shadowRadius: 3.84,\r\n        elevation: 3,\r\n    }\r\n})\r\nexport default QuestionScreen;"]},"metadata":{},"sourceType":"module"}