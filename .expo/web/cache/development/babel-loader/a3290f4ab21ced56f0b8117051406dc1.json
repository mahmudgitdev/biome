{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"L:\\\\ReactNative\\\\biome\\\\src\\\\screens\\\\QuestionScreen.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport questionApi from \"../api/baseApi\";\n\nvar QuestionScreen = function QuestionScreen(_ref) {\n  var route = _ref.route;\n  var id = route.params.tropicsId;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      questions = _useState2[0],\n      setQuestions = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsloading = _useState4[1];\n\n  var loadQuestions = function loadQuestions() {\n    var _await$questionApi$ge, data;\n\n    return _regeneratorRuntime.async(function loadQuestions$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(questionApi.get('/get-questions', {\n              id: id\n            }));\n\n          case 2:\n            _await$questionApi$ge = _context.sent;\n            data = _await$questionApi$ge.data;\n            console.log(data);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    loadQuestions();\n  }, [0]);\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }\n  }, \"QuestionScreen\"), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }\n  }, id));\n};\n\nvar styles = StyleSheet.create({});\nexport default QuestionScreen;","map":{"version":3,"sources":["L:/ReactNative/biome/src/screens/QuestionScreen.js"],"names":["React","useState","useEffect","questionApi","QuestionScreen","route","id","params","tropicsId","questions","setQuestions","isLoading","setIsloading","loadQuestions","get","data","console","log","styles","StyleSheet","create"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;;;;AAEA,OAAOC,WAAP;;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAAW;AAAA,MAATC,KAAS,QAATA,KAAS;AAC9B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAN,CAAaC,SAAxB;;AAD8B,kBAEGP,QAAQ,CAAC,EAAD,CAFX;AAAA;AAAA,MAEvBQ,SAFuB;AAAA,MAEbC,YAFa;;AAAA,mBAGGT,QAAQ,CAAC,IAAD,CAHX;AAAA;AAAA,MAGvBU,SAHuB;AAAA,MAGbC,YAHa;;AAK9B,MAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACGV,WAAW,CAACW,GAAZ,CAAgB,gBAAhB,EAAiC;AAACR,cAAAA,EAAE,EAACA;AAAJ,aAAjC,CADH;;AAAA;AAAA;AACXS,YAAAA,IADW,yBACXA,IADW;AAElBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AAFkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAIAb,EAAAA,SAAS,CAAC,YAAI;AACVW,IAAAA,aAAa;AAChB,GAFQ,EAEP,CAAC,CAAD,CAFO,CAAT;AAGA,SACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOP,EAAP,CAFJ,CADJ;AAMH,CAlBD;;AAmBA,IAAMY,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB,EAAlB,CAAf;AAGA,eAAehB,cAAf","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport { View,StyleSheet,Text } from 'react-native';\r\nimport questionApi from '../api/baseApi';\r\nconst QuestionScreen = ({route})=>{\r\n    const id = route.params.tropicsId\r\n    const [questions,setQuestions] = useState([]);\r\n    const [isLoading,setIsloading] = useState(true);\r\n\r\n    const loadQuestions = async()=>{\r\n        const {data} = await questionApi.get('/get-questions',{id:id});\r\n        console.log(data);\r\n    }\r\n    useEffect(()=>{\r\n        loadQuestions();\r\n    },[0])\r\n    return(\r\n        <View>\r\n            <Text>QuestionScreen</Text>\r\n            <Text>{id}</Text>\r\n        </View>\r\n    )\r\n}\r\nconst styles = StyleSheet.create({\r\n\r\n})\r\nexport default QuestionScreen;"]},"metadata":{},"sourceType":"module"}