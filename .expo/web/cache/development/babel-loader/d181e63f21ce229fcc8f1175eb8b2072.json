{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"L:\\\\ReactNative\\\\biome\\\\src\\\\screens\\\\QuestionScreen.js\";\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport questionApi from \"../api/baseApi\";\nimport { COLORS } from \"../constants\";\n\nvar QuestionScreen = function QuestionScreen(_ref) {\n  var route = _ref.route;\n  var id = route.params.tropicsId;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      questions = _useState2[0],\n      setQuestions = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsloading = _useState4[1];\n\n  var loadQuestions = function loadQuestions() {\n    var _await$questionApi$ge, data;\n\n    return _regeneratorRuntime.async(function loadQuestions$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(questionApi.get(\"/get-questions/\" + id));\n\n          case 2:\n            _await$questionApi$ge = _context.sent;\n            data = _await$questionApi$ge.data;\n            setQuestions(data);\n            setIsloading(false);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    loadQuestions();\n  }, [0]);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, isLoading ? React.createElement(ActivityIndicator, {\n    size: \"large\",\n    color: COLORS.yellow,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 24\n    }\n  }) : React.createElement(FlatList, {\n    data: questions,\n    keyExtractor: function keyExtractor(item) {\n      return item._id;\n    },\n    renderItem: renderItem,\n    numColumns: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({});\nexport default QuestionScreen;","map":{"version":3,"sources":["L:/ReactNative/biome/src/screens/QuestionScreen.js"],"names":["React","useState","useEffect","questionApi","COLORS","QuestionScreen","route","id","params","tropicsId","questions","setQuestions","isLoading","setIsloading","loadQuestions","get","data","styles","container","yellow","item","_id","renderItem","StyleSheet","create"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;;;;;AAOA,OAAOC,WAAP;AACA,SAAQC,MAAR;;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAAW;AAAA,MAATC,KAAS,QAATA,KAAS;AAC9B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAN,CAAaC,SAAxB;;AAD8B,kBAEGR,QAAQ,CAAC,EAAD,CAFX;AAAA;AAAA,MAEvBS,SAFuB;AAAA,MAEbC,YAFa;;AAAA,mBAGGV,QAAQ,CAAC,IAAD,CAHX;AAAA;AAAA,MAGvBW,SAHuB;AAAA,MAGbC,YAHa;;AAK9B,MAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACGX,WAAW,CAACY,GAAZ,qBAAkCR,EAAlC,CADH;;AAAA;AAAA;AACXS,YAAAA,IADW,yBACXA,IADW;AAElBL,YAAAA,YAAY,CAACK,IAAD,CAAZ;AACAH,YAAAA,YAAY,CAAC,KAAD,CAAZ;;AAHkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAMAX,EAAAA,SAAS,CAAC,YAAI;AACVY,IAAAA,aAAa;AAChB,GAFQ,EAEP,CAAC,CAAD,CAFO,CAAT;AAGA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEG,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKN,SAAS,GAAC,oBAAC,iBAAD;AAAmB,IAAA,IAAI,EAAC,OAAxB;AAAgC,IAAA,KAAK,EAAER,MAAM,CAACe,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAD,GACV,oBAAC,QAAD;AACA,IAAA,IAAI,EAAET,SADN;AAEA,IAAA,YAAY,EAAE,sBAAAU,IAAI;AAAA,aAAEA,IAAI,CAACC,GAAP;AAAA,KAFlB;AAGA,IAAA,UAAU,EAAEC,UAHZ;AAIA,IAAA,UAAU,EAAE,CAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAYH,CA1BD;;AA2BA,IAAML,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB,EAAlB,CAAf;AAGA,eAAenB,cAAf","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport { \r\n    View,\r\n    StyleSheet,\r\n    Text,\r\n    FlatList\r\n} from 'react-native';\r\nimport questionApi from '../api/baseApi';\r\nimport {COLORS} from '../constants';\r\nconst QuestionScreen = ({route})=>{\r\n    const id = route.params.tropicsId\r\n    const [questions,setQuestions] = useState([]);\r\n    const [isLoading,setIsloading] = useState(true);\r\n\r\n    const loadQuestions = async()=>{\r\n        const {data} = await questionApi.get(`/get-questions/${id}`);\r\n        setQuestions(data);\r\n        setIsloading(false);\r\n\r\n    }\r\n    useEffect(()=>{\r\n        loadQuestions();\r\n    },[0])\r\n    return(\r\n        <View style={styles.container}>\r\n            {isLoading?<ActivityIndicator size=\"large\" color={COLORS.yellow} />:\r\n            <FlatList\r\n            data={questions}\r\n            keyExtractor={item=>item._id}\r\n            renderItem={renderItem}\r\n            numColumns={1}\r\n            />\r\n            }\r\n        </View>\r\n    )\r\n}\r\nconst styles = StyleSheet.create({\r\n\r\n})\r\nexport default QuestionScreen;"]},"metadata":{},"sourceType":"module"}