{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"L:\\\\ReactNative\\\\biome\\\\src\\\\screens\\\\ModelTestScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport questionApi from \"../api/baseApi\";\nimport { COLORS, SIZES } from \"../constants\";\nimport { MaterialIcons } from '@expo/vector-icons';\n\nvar ModelTestScreen = function ModelTestScreen(_ref) {\n  var route = _ref.route;\n  var id = route.params.tropicsId;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      questions = _useState2[0],\n      setQuestions = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsloading = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      score = _useState6[0],\n      setScore = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      selected = _useState8[0],\n      setSelected = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      currentSelected = _useState10[0],\n      setCurrentSelected = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      isSelected = _useState12[0],\n      setIsSelected = _useState12[1];\n\n  var loadQuestions = function loadQuestions() {\n    var _await$questionApi$ge, data;\n\n    return _regeneratorRuntime.async(function loadQuestions$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(questionApi.get(\"/get-questions/\" + id));\n\n          case 2:\n            _await$questionApi$ge = _context.sent;\n            data = _await$questionApi$ge.data;\n            setQuestions(data);\n            setIsloading(false);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleAnswer = function handleAnswer(qid, option) {\n    setSelected([].concat(_toConsumableArray(selected), [{\n      qid: qid,\n      option: option._id\n    }]));\n  };\n\n  var alreadySelected = function alreadySelected(item) {\n    if (selected.find(function (id) {\n      return id !== item.id;\n    })) {\n      setSelected([].concat(_toConsumableArray(selected), [item._id]));\n    }\n  };\n\n  useEffect(function () {\n    loadQuestions();\n  }, []);\n\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    return React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }, React.createElement(View, {\n      style: _objectSpread({\n        flex: 1,\n        flexDirection: 'column',\n        margin: 5,\n        paddingVertical: 15,\n        paddingHorizontal: 18,\n        borderRadius: 5,\n        backgroundColor: COLORS.white\n      }, styles.shadow),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }), React.createElement(Text, {\n      style: {\n        fontWeight: 'bold',\n        fontSize: 15,\n        color: COLORS.black\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }, item.question), React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }, React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return handleAnswer(item._id, item.options[0]);\n      },\n      style: {\n        flexDirection: 'row',\n        paddingVertical: 5,\n        alignItems: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }, React.createElement(View, {\n      style: {\n        backgroundColor: selected.map(function (id) {\n          id.qid == item._id;\n        }) ? COLORS.darkgreen : 'gray',\n        width: 27,\n        height: 27,\n        borderRadius: 40,\n        marginRight: 6,\n        justifyContent: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 29\n      }\n    }, React.createElement(Text, {\n      style: {\n        alignSelf: 'center',\n        color: 'white'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 29\n      }\n    }, item.options[0].qop)), React.createElement(Text, {\n      style: {\n        fontSize: 15\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 29\n      }\n    }, item.options[0].option)), React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return handleAnswer(item._id, item.options[1]);\n      },\n      style: {\n        flexDirection: 'row',\n        paddingVertical: 5,\n        alignItems: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 25\n      }\n    }, React.createElement(View, {\n      style: {\n        backgroundColor: selected.find(function (id) {\n          return id == item._id;\n        }) ? COLORS.darkgreen : 'gray',\n        width: 27,\n        height: 27,\n        borderRadius: 40,\n        marginRight: 6,\n        justifyContent: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 29\n      }\n    }, React.createElement(Text, {\n      style: {\n        alignSelf: 'center',\n        color: 'white'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 29\n      }\n    }, item.options[1].qop)), React.createElement(Text, {\n      style: {\n        fontSize: 15\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 29\n      }\n    }, item.options[1].option))), React.createElement(Text, {\n      style: {\n        color: COLORS.darkgray,\n        fontSize: 13\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }\n    }, item.describe ? item.describe : '')));\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }, score), isLoading ? React.createElement(ActivityIndicator, {\n    size: \"large\",\n    color: COLORS.blue,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 24\n    }\n  }) : React.createElement(FlatList, {\n    data: questions,\n    keyExtractor: function keyExtractor(item) {\n      return item._id;\n    },\n    renderItem: renderItem,\n    numColumns: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.lightGray2,\n    paddingVertical: 5\n  },\n  shadow: {\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 2,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 3\n  }\n});\nexport default ModelTestScreen;","map":{"version":3,"sources":["L:/ReactNative/biome/src/screens/ModelTestScreen.js"],"names":["React","useState","useEffect","useContext","questionApi","COLORS","SIZES","MaterialIcons","ModelTestScreen","route","id","params","tropicsId","questions","setQuestions","isLoading","setIsloading","score","setScore","selected","setSelected","currentSelected","setCurrentSelected","isSelected","setIsSelected","loadQuestions","get","data","handleAnswer","qid","option","_id","alreadySelected","item","find","renderItem","flex","flexDirection","margin","paddingVertical","paddingHorizontal","borderRadius","backgroundColor","white","styles","shadow","fontWeight","fontSize","color","black","question","options","alignItems","map","darkgreen","width","height","marginRight","justifyContent","alignSelf","qop","darkgray","describe","container","blue","StyleSheet","create","lightGray2","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation"],"mappings":"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","sourcesContent":["import React,{useState,useEffect,useContext} from 'react';\r\nimport { \r\n    View,\r\n    StyleSheet,\r\n    Text,\r\n    FlatList,\r\n    TouchableOpacity,\r\n    ActivityIndicator,\r\n} from 'react-native';\r\nimport questionApi from '../api/baseApi';\r\nimport {COLORS, SIZES} from '../constants';\r\nimport { MaterialIcons } from '@expo/vector-icons';\r\nconst ModelTestScreen = ({route})=>{\r\n    const id = route.params.tropicsId\r\n    const [questions,setQuestions] = useState([]);\r\n    const [isLoading,setIsloading] = useState(true);\r\n    const [score,setScore] =  useState(0);\r\n    const [selected,setSelected] = useState([]);\r\n\r\n    const [currentSelected,setCurrentSelected] = useState('');\r\n    const [isSelected,setIsSelected] = useState(false);\r\n\r\n    const loadQuestions = async()=>{\r\n        const {data} = await questionApi.get(`/get-questions/${id}`);\r\n        setQuestions(data);\r\n        setIsloading(false);\r\n\r\n    }\r\n\r\n    const handleAnswer = (qid,option)=>{\r\n\r\n        setSelected([...selected,{\r\n            qid:qid,\r\n            option:option._id\r\n        }]);\r\n\r\n\r\n\r\n        // if(item.isCorrect){\r\n        //     setScore(score+1);\r\n        // }\r\n\r\n    }\r\n    const alreadySelected = (item)=>{\r\n        if(selected.find((id)=>id !== item.id)){\r\n            setSelected([...selected,item._id]);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n        loadQuestions();\r\n    },[]);\r\n\r\n\r\n\r\n    const renderItem = ({item})=>{\r\n        return(\r\n            <View>\r\n            <View style={{\r\n                flex: 1,\r\n                flexDirection: 'column',\r\n                margin: 5,\r\n                paddingVertical: 15,\r\n                paddingHorizontal: 18,\r\n                borderRadius: 5,\r\n                backgroundColor: COLORS.white,\r\n                ...styles.shadow\r\n\r\n            }}>\r\n                <View>\r\n                </View>\r\n                <Text style={{fontWeight:'bold',fontSize:15,color:COLORS.black}}>{item.question}</Text>\r\n                <View>\r\n\r\n                <TouchableOpacity\r\n                        onPress={()=>handleAnswer(item._id,item.options[0])}\r\n                         style={{flexDirection:'row',paddingVertical:5,alignItems:'center'}}>\r\n                            <View style={{\r\n                                backgroundColor:selected.map((id)=>{\r\n                                    id.qid == item._id\r\n                                })?COLORS.darkgreen:'gray',\r\n                                width:27,\r\n                                height:27,\r\n                                borderRadius:40,\r\n                                marginRight:6,\r\n                                justifyContent:'center'\r\n                                }}>\r\n                            \r\n                            <Text style={{\r\n                                alignSelf:'center',\r\n                                color:'white',\r\n                            }}>{item.options[0].qop}</Text>\r\n                            </View>\r\n                            <Text style={{fontSize:15}}>{item.options[0].option}</Text>\r\n                        </TouchableOpacity>\r\n                        <TouchableOpacity\r\n                        onPress={()=>handleAnswer(item._id,item.options[1])}\r\n                         style={{flexDirection:'row',paddingVertical:5,alignItems:'center'}}>\r\n                            <View style={{\r\n                                backgroundColor:selected.find((id)=>id == item._id)?COLORS.darkgreen:'gray',\r\n                                width:27,\r\n                                height:27,\r\n                                borderRadius:40,\r\n                                marginRight:6,\r\n                                justifyContent:'center'\r\n                                }}>\r\n                            \r\n                            <Text style={{\r\n                                alignSelf:'center',\r\n                                color:'white',\r\n                            }}>{item.options[1].qop}</Text>\r\n                            </View>\r\n                            <Text style={{fontSize:15}}>{item.options[1].option}</Text>\r\n                        </TouchableOpacity>\r\n                    \r\n                {/* <FlatList \r\n                data={item.options}\r\n                keyExtractor={item=>item._id}\r\n                renderItem={({item})=>{\r\n                    return(\r\n                        <TouchableOpacity\r\n                        onPress={()=>handleAnswer(item)}\r\n                         style={{flexDirection:'row',paddingVertical:5,alignItems:'center'}}>\r\n                            <View style={{\r\n                                backgroundColor:selected.find(id=>id == item._id) && isSelected ?COLORS.darkgreen:'gray',\r\n                                width:27,\r\n                                height:27,\r\n                                borderRadius:40,\r\n                                marginRight:6,\r\n                                justifyContent:'center'\r\n                                }}>\r\n                            \r\n                            <Text style={{\r\n                                alignSelf:'center',\r\n                                color:'white',\r\n                            }}>{item.qop}</Text>\r\n                            </View>\r\n                            <Text style={{fontSize:15}}>{item.option}</Text>\r\n                        </TouchableOpacity>\r\n                    )\r\n                }}\r\n                /> */}\r\n            </View>\r\n            <Text style={{color:COLORS.darkgray,fontSize:13}}>{item.describe?item.describe:''}</Text>\r\n            </View>\r\n                \r\n        </View>\r\n        )\r\n\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <View style={styles.container}>\r\n            <Text>{score}</Text>\r\n            {isLoading?<ActivityIndicator size=\"large\" color={COLORS.blue} />:\r\n            <FlatList\r\n            data={questions}\r\n            keyExtractor={item=>item._id}\r\n            renderItem={renderItem}\r\n            numColumns={1}\r\n            />\r\n            }\r\n        </View>\r\n    )\r\n}\r\nconst styles = StyleSheet.create({\r\n    container:{\r\n        flex:1,\r\n        backgroundColor:COLORS.lightGray2,\r\n        paddingVertical:5\r\n    },\r\n    shadow: {\r\n        shadowColor: \"#000\",\r\n        shadowOffset: {\r\n            width: 2,\r\n            height: 2,\r\n        },\r\n        shadowOpacity: 0.25,\r\n        shadowRadius: 3.84,\r\n        elevation: 3,\r\n    }\r\n})\r\nexport default ModelTestScreen;"]},"metadata":{},"sourceType":"module"}