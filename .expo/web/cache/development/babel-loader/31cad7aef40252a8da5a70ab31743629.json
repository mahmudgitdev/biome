{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"L:\\\\ReactNative\\\\biome\\\\src\\\\screens\\\\QuestionScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport questionApi from \"../api/baseApi\";\nimport { COLORS } from \"../constants\";\n\nvar QuestionScreen = function QuestionScreen(_ref) {\n  var route = _ref.route;\n  var id = route.params.tropicsId;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      questions = _useState2[0],\n      setQuestions = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsloading = _useState4[1];\n\n  var loadQuestions = function loadQuestions() {\n    var _await$questionApi$ge, data;\n\n    return _regeneratorRuntime.async(function loadQuestions$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(questionApi.get(\"/get-questions/\" + id));\n\n          case 2:\n            _await$questionApi$ge = _context.sent;\n            data = _await$questionApi$ge.data;\n            setQuestions(data);\n            setIsloading(false);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    loadQuestions();\n  }, [0]);\n\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    return React.createElement(TouchableOpacity, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }\n    }, React.createElement(View, {\n      style: _objectSpread({\n        flex: 1,\n        flexDirection: 'column',\n        margin: 5,\n        paddingVertical: 15,\n        paddingHorizontal: 18,\n        borderRadius: 5,\n        backgroundColor: COLORS.white\n      }, styles.shadow),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: {\n        fontWeight: 'bold',\n        fontSize: 14,\n        color: COLORS.black\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }\n    }, item.question)));\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, isLoading ? React.createElement(ActivityIndicator, {\n    size: \"large\",\n    color: COLORS.yellow,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 24\n    }\n  }) : React.createElement(FlatList, {\n    data: questions,\n    keyExtractor: function keyExtractor(item) {\n      return item._id;\n    },\n    renderItem: renderItem,\n    numColumns: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.lightGray2,\n    paddingVertical: 5\n  },\n  shadow: {\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 2,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 3\n  }\n});\nexport default QuestionScreen;","map":{"version":3,"sources":["L:/ReactNative/biome/src/screens/QuestionScreen.js"],"names":["React","useState","useEffect","questionApi","COLORS","QuestionScreen","route","id","params","tropicsId","questions","setQuestions","isLoading","setIsloading","loadQuestions","get","data","renderItem","item","flex","flexDirection","margin","paddingVertical","paddingHorizontal","borderRadius","backgroundColor","white","styles","shadow","fontWeight","fontSize","color","black","question","container","yellow","_id","StyleSheet","create","lightGray2","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;;;;;AAOA,OAAOC,WAAP;AACA,SAAQC,MAAR;;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAAW;AAAA,MAATC,KAAS,QAATA,KAAS;AAC9B,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAN,CAAaC,SAAxB;;AAD8B,kBAEGR,QAAQ,CAAC,EAAD,CAFX;AAAA;AAAA,MAEvBS,SAFuB;AAAA,MAEbC,YAFa;;AAAA,mBAGGV,QAAQ,CAAC,IAAD,CAHX;AAAA;AAAA,MAGvBW,SAHuB;AAAA,MAGbC,YAHa;;AAK9B,MAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACGX,WAAW,CAACY,GAAZ,qBAAkCR,EAAlC,CADH;;AAAA;AAAA;AACXS,YAAAA,IADW,yBACXA,IADW;AAElBL,YAAAA,YAAY,CAACK,IAAD,CAAZ;AACAH,YAAAA,YAAY,CAAC,KAAD,CAAZ;;AAHkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAMAX,EAAAA,SAAS,CAAC,YAAI;AACVY,IAAAA,aAAa;AAChB,GAFQ,EAEP,CAAC,CAAD,CAFO,CAAT;;AAKA,MAAMG,UAAU,GAAG,SAAbA,UAAa,QAAU;AAAA,QAARC,IAAQ,SAARA,IAAQ;AACzB,WACI,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,IAAD;AAAM,MAAA,KAAK;AACPC,QAAAA,IAAI,EAAE,CADC;AAEPC,QAAAA,aAAa,EAAE,QAFR;AAGPC,QAAAA,MAAM,EAAE,CAHD;AAIPC,QAAAA,eAAe,EAAE,EAJV;AAKPC,QAAAA,iBAAiB,EAAE,EALZ;AAMPC,QAAAA,YAAY,EAAE,CANP;AAOPC,QAAAA,eAAe,EAAErB,MAAM,CAACsB;AAPjB,SAQJC,MAAM,CAACC,MARH,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWI,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACC,QAAAA,UAAU,EAAC,MAAZ;AAAmBC,QAAAA,QAAQ,EAAC,EAA5B;AAA+BC,QAAAA,KAAK,EAAC3B,MAAM,CAAC4B;AAA5C,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAkEd,IAAI,CAACe,QAAvE,CAXJ,CADA,CADJ;AAkBH,GAnBD;;AAuBA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEN,MAAM,CAACO,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKtB,SAAS,GAAC,oBAAC,iBAAD;AAAmB,IAAA,IAAI,EAAC,OAAxB;AAAgC,IAAA,KAAK,EAAER,MAAM,CAAC+B,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAD,GACV,oBAAC,QAAD;AACA,IAAA,IAAI,EAAEzB,SADN;AAEA,IAAA,YAAY,EAAE,sBAAAQ,IAAI;AAAA,aAAEA,IAAI,CAACkB,GAAP;AAAA,KAFlB;AAGA,IAAA,UAAU,EAAEnB,UAHZ;AAIA,IAAA,UAAU,EAAE,CAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAYH,CAnDD;;AAoDA,IAAMU,MAAM,GAAGU,UAAU,CAACC,MAAX,CAAkB;AAC7BJ,EAAAA,SAAS,EAAC;AACNf,IAAAA,IAAI,EAAC,CADC;AAENM,IAAAA,eAAe,EAACrB,MAAM,CAACmC,UAFjB;AAGNjB,IAAAA,eAAe,EAAC;AAHV,GADmB;AAM7BM,EAAAA,MAAM,EAAE;AACJY,IAAAA,WAAW,EAAE,MADT;AAEJC,IAAAA,YAAY,EAAE;AACVC,MAAAA,KAAK,EAAE,CADG;AAEVC,MAAAA,MAAM,EAAE;AAFE,KAFV;AAMJC,IAAAA,aAAa,EAAE,IANX;AAOJC,IAAAA,YAAY,EAAE,IAPV;AAQJC,IAAAA,SAAS,EAAE;AARP;AANqB,CAAlB,CAAf;AAiBA,eAAezC,cAAf","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport { \r\n    View,\r\n    StyleSheet,\r\n    Text,\r\n    FlatList\r\n} from 'react-native';\r\nimport questionApi from '../api/baseApi';\r\nimport {COLORS} from '../constants';\r\nconst QuestionScreen = ({route})=>{\r\n    const id = route.params.tropicsId\r\n    const [questions,setQuestions] = useState([]);\r\n    const [isLoading,setIsloading] = useState(true);\r\n\r\n    const loadQuestions = async()=>{\r\n        const {data} = await questionApi.get(`/get-questions/${id}`);\r\n        setQuestions(data);\r\n        setIsloading(false);\r\n\r\n    }\r\n    useEffect(()=>{\r\n        loadQuestions();\r\n    },[0]);\r\n\r\n\r\n    const renderItem = ({item})=>{\r\n        return(\r\n            <TouchableOpacity>\r\n            <View style={{\r\n                flex: 1,\r\n                flexDirection: 'column',\r\n                margin: 5,\r\n                paddingVertical: 15,\r\n                paddingHorizontal: 18,\r\n                borderRadius: 5,\r\n                backgroundColor: COLORS.white,\r\n                ...styles.shadow\r\n\r\n            }}>\r\n                <Text style={{fontWeight:'bold',fontSize:14,color:COLORS.black}}>{item.question}</Text>\r\n                \r\n            </View>\r\n            </TouchableOpacity>\r\n        )\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <View style={styles.container}>\r\n            {isLoading?<ActivityIndicator size=\"large\" color={COLORS.yellow} />:\r\n            <FlatList\r\n            data={questions}\r\n            keyExtractor={item=>item._id}\r\n            renderItem={renderItem}\r\n            numColumns={1}\r\n            />\r\n            }\r\n        </View>\r\n    )\r\n}\r\nconst styles = StyleSheet.create({\r\n    container:{\r\n        flex:1,\r\n        backgroundColor:COLORS.lightGray2,\r\n        paddingVertical:5\r\n    },\r\n    shadow: {\r\n        shadowColor: \"#000\",\r\n        shadowOffset: {\r\n            width: 2,\r\n            height: 2,\r\n        },\r\n        shadowOpacity: 0.25,\r\n        shadowRadius: 3.84,\r\n        elevation: 3,\r\n    }\r\n})\r\nexport default QuestionScreen;"]},"metadata":{},"sourceType":"module"}