{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"L:\\\\ReactNative\\\\biome\\\\src\\\\screens\\\\StudyTropicScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport tropicApi from \"../api/baseApi\";\nimport { bankStudyTropics } from \"../localdata/data\";\nimport { COLORS } from \"../constants\";\n\nvar StudyTropicScreen = function StudyTropicScreen(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n  var id = route.params.id;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      tropics = _useState2[0],\n      setTropics = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsloading = _useState4[1];\n\n  var loadTropics = function loadTropics() {\n    var _await$tropicApi$get, data, _await$tropicApi$get2, _data;\n\n    return _regeneratorRuntime.async(function loadTropics$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(id == 1)) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(tropicApi.get('/get-bcs-tropics'));\n\n          case 3:\n            _await$tropicApi$get = _context.sent;\n            data = _await$tropicApi$get.data;\n            setTropics(data);\n            setIsloading(false);\n            _context.next = 19;\n            break;\n\n          case 9:\n            if (!(id == 2)) {\n              _context.next = 18;\n              break;\n            }\n\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(tropicApi.get('/get-bank-tropics'));\n\n          case 12:\n            _await$tropicApi$get2 = _context.sent;\n            _data = _await$tropicApi$get2.data;\n            setTropics(_data);\n            setIsloading(false);\n            _context.next = 19;\n            break;\n\n          case 18:\n            if (id == 3) {\n              Alert.alert('comming soon....');\n            } else if (id == 4) {\n              Alert.alert('comming soon....');\n            } else if (id == 5) {\n              Alert.alert('comming soon....');\n            } else if (id == 6) {\n              Alert.alert('comming soon....');\n            }\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    return React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return navigation.push('question', {\n          tropicsId: item._id,\n          title: item.title\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, React.createElement(View, {\n      style: _objectSpread({\n        flex: 1,\n        flexDirection: 'column',\n        margin: 5,\n        paddingVertical: 15,\n        paddingHorizontal: 18,\n        borderRadius: 5,\n        backgroundColor: COLORS.white\n      }, styles.shadow),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: {\n        fontWeight: 'bold',\n        fontSize: 14,\n        color: COLORS.black\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }, item.title)));\n  };\n\n  useEffect(function () {\n    loadTropics();\n  }, [0]);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, isLoading ? React.createElement(ActivityIndicator, {\n    size: \"large\",\n    color: COLORS.yellow,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 24\n    }\n  }) : React.createElement(FlatList, {\n    data: tropics,\n    keyExtractor: function keyExtractor(item) {\n      return item._id;\n    },\n    renderItem: renderItem,\n    numColumns: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.lightGray,\n    paddingVertical: 5\n  },\n  shadow: {\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 2,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 3\n  }\n});\nexport default StudyTropicScreen;","map":{"version":3,"sources":["L:/ReactNative/biome/src/screens/StudyTropicScreen.js"],"names":["React","useState","useEffect","TouchableOpacity","tropicApi","bankStudyTropics","COLORS","StudyTropicScreen","route","navigation","id","params","tropics","setTropics","isLoading","setIsloading","loadTropics","get","data","Alert","alert","renderItem","item","push","tropicsId","_id","title","flex","flexDirection","margin","paddingVertical","paddingHorizontal","borderRadius","backgroundColor","white","styles","shadow","fontWeight","fontSize","color","black","container","yellow","StyleSheet","create","lightGray","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport{\r\n    Text,\r\n    View,\r\n    Alert,\r\n    StyleSheet,\r\n    FlatList,\r\n    ActivityIndicator\r\n} from 'react-native';\r\nimport { TouchableOpacity } from 'react-native-gesture-handler';\r\nimport tropicApi from '../api/baseApi';\r\nimport {bankStudyTropics} from '../localdata/data';\r\nimport { COLORS } from '../constants';\r\n\r\nconst StudyTropicScreen = ({route,navigation})=>{\r\n    const id = route.params.id;\r\n    const [tropics,setTropics] = useState([]);\r\n    const [isLoading,setIsloading] = useState(true);\r\n\r\n\r\n    const loadTropics = async()=>{\r\n        if(id==1){\r\n            const {data} = await tropicApi.get('/get-bcs-tropics');\r\n            setTropics(data);\r\n            setIsloading(false);\r\n        }else if(id==2){\r\n            const {data} = await tropicApi.get('/get-bank-tropics');\r\n            setTropics(data);\r\n            setIsloading(false);\r\n            \r\n        }else if(id==3){\r\n            Alert.alert('comming soon....')\r\n            \r\n        }else if(id==4){\r\n            Alert.alert('comming soon....')\r\n            \r\n        }else if(id==5){\r\n            Alert.alert('comming soon....')\r\n           \r\n        }else if(id==6){\r\n            Alert.alert('comming soon....')\r\n            \r\n        }\r\n    }\r\n\r\n    const renderItem = ({item})=>{\r\n        return(\r\n            <TouchableOpacity onPress={()=>navigation.push('question',{\r\n                tropicsId:item._id,\r\n                title:item.title\r\n            })}>\r\n            <View style={{\r\n                flex: 1,\r\n                flexDirection: 'column',\r\n                margin: 5,\r\n                paddingVertical: 15,\r\n                paddingHorizontal: 18,\r\n                borderRadius: 5,\r\n                backgroundColor: COLORS.white,\r\n                ...styles.shadow\r\n\r\n            }}>\r\n                <Text style={{fontWeight:'bold',fontSize:14,color:COLORS.black}}>{item.title}</Text>\r\n                \r\n            </View>\r\n            </TouchableOpacity>\r\n        )\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadTropics()\r\n    }, [0])\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n        <View style={styles.container}>\r\n            {isLoading?<ActivityIndicator size=\"large\" color={COLORS.yellow} />:\r\n            <FlatList\r\n            data={tropics}\r\n            keyExtractor={item=>item._id}\r\n            renderItem={renderItem}\r\n            numColumns={1}\r\n            />\r\n            }\r\n        </View>\r\n    )\r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container:{\r\n        flex:1,\r\n        backgroundColor:COLORS.lightGray,\r\n        paddingVertical:5\r\n    },\r\n    shadow: {\r\n        shadowColor: \"#000\",\r\n        shadowOffset: {\r\n            width: 2,\r\n            height: 2,\r\n        },\r\n        shadowOpacity: 0.25,\r\n        shadowRadius: 3.84,\r\n        elevation: 3,\r\n    }\r\n})\r\n\r\nexport default StudyTropicScreen;"]},"metadata":{},"sourceType":"module"}