{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"L:\\\\ReactNative\\\\biome\\\\src\\\\screens\\\\BcsTestTropics.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport tropicApi from \"../api/baseApi\";\nimport { COLORS, SIZES } from \"../constants\";\nimport { FontAwesome } from '@expo/vector-icons';\n\nvar BcsTestTropics = function BcsTestTropics(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      tropics = _useState2[0],\n      setTropics = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsloading = _useState4[1];\n\n  var loadTropics = function loadTropics() {\n    var _await$tropicApi$get, data;\n\n    return _regeneratorRuntime.async(function loadTropics$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(tropicApi.get('/get-bcs-tropics'));\n\n          case 2:\n            _await$tropicApi$get = _context.sent;\n            data = _await$tropicApi$get.data;\n            setTropics(data);\n            setIsloading(false);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    return React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return navigation.push('question', {\n          tropicsId: item._id,\n          title: item.title\n        });\n      },\n      style: {\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    }, React.createElement(View, {\n      style: _objectSpread({\n        margin: 5,\n        width: SIZES.width - 100,\n        minHeight: 100,\n        justifyContent: 'center',\n        alignItems: 'center',\n        borderRadius: 5,\n        padding: 10,\n        backgroundColor: COLORS.white\n      }, styles.shadow),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: {\n        fontWeight: 'bold',\n        fontSize: 18,\n        color: COLORS.black\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, item.title)));\n  };\n\n  useEffect(function () {\n    loadTropics();\n  }, [0]);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: {\n      paddingVertical: 6,\n      backgroundColor: COLORS.lightBlue\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 17,\n      color: COLORS.white,\n      fontWeight: 'bold',\n      letterSpacing: 6,\n      alignSelf: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, \"PRELIMINARY\")), isLoading ? React.createElement(ActivityIndicator, {\n    size: \"large\",\n    color: COLORS.blue,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 24\n    }\n  }) : React.createElement(FlatList, {\n    data: tropics,\n    keyExtractor: function keyExtractor(item) {\n      return item._id;\n    },\n    renderItem: renderItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: COLORS.lightGray\n  },\n  shadow: {\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 2,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 3\n  }\n});\nexport default BcsTestTropics;","map":{"version":3,"sources":["L:/ReactNative/biome/src/screens/BcsTestTropics.js"],"names":["React","useState","useEffect","TouchableOpacity","tropicApi","COLORS","SIZES","FontAwesome","BcsTestTropics","route","navigation","tropics","setTropics","isLoading","setIsloading","loadTropics","get","data","renderItem","item","push","tropicsId","_id","title","justifyContent","alignItems","margin","width","minHeight","borderRadius","padding","backgroundColor","white","styles","shadow","fontWeight","fontSize","color","black","container","paddingVertical","lightBlue","letterSpacing","alignSelf","blue","StyleSheet","create","flex","lightGray","shadowColor","shadowOffset","height","shadowOpacity","shadowRadius","elevation"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport{\r\n    Text,\r\n    View,\r\n    StyleSheet,\r\n    FlatList,\r\n    ActivityIndicator\r\n} from 'react-native';\r\nimport { TouchableOpacity } from 'react-native-gesture-handler';\r\nimport tropicApi from '../api/baseApi';\r\nimport { COLORS,SIZES } from '../constants';\r\nimport { FontAwesome } from '@expo/vector-icons';\r\n\r\nconst BcsTestTropics = ({route,navigation})=>{\r\n    const [tropics,setTropics] = useState([]);\r\n    const [isLoading,setIsloading] = useState(true);\r\n\r\n\r\n    const loadTropics = async()=>{\r\n            const {data} = await tropicApi.get('/get-bcs-tropics');\r\n            setTropics(data);\r\n            setIsloading(false);\r\n    }\r\n\r\n    const renderItem = ({item})=>{\r\n        return(\r\n            <TouchableOpacity \r\n                onPress={()=>navigation.push('question',{\r\n                tropicsId:item._id,\r\n                title:item.title\r\n                })}\r\n                style={{\r\n                    justifyContent:'center',\r\n                    alignItems:'center'\r\n                }}\r\n            >\r\n            <View style={{\r\n                margin: 5,\r\n                width:SIZES.width-100,\r\n                minHeight:100,\r\n                justifyContent:'center',\r\n                alignItems:'center',\r\n                borderRadius: 5,\r\n                padding:10,\r\n                backgroundColor: COLORS.white,\r\n                ...styles.shadow\r\n\r\n            }}>\r\n                <Text style={{\r\n                    fontWeight:'bold',\r\n                    fontSize:18,\r\n                    color:COLORS.black,\r\n                    }}>{item.title}</Text>\r\n            </View>\r\n            </TouchableOpacity>\r\n        )\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadTropics()\r\n    }, [0])\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n        <View style={styles.container}>\r\n            <View style={{paddingVertical:6,backgroundColor:COLORS.lightBlue}}>\r\n            <Text style={{fontSize:17,color:COLORS.white,fontWeight:'bold',letterSpacing:6,alignSelf:'center'}}>PRELIMINARY</Text>\r\n            </View>\r\n            {isLoading?<ActivityIndicator size=\"large\" color={COLORS.blue} />:\r\n            <FlatList\r\n            data={tropics}\r\n            keyExtractor={item=>item._id}\r\n            renderItem={renderItem}\r\n            />\r\n            }\r\n        </View>\r\n    )\r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container:{\r\n        flex:1,\r\n        backgroundColor:COLORS.lightGray,\r\n    },\r\n    shadow: {\r\n        shadowColor: \"#000\",\r\n        shadowOffset: {\r\n            width: 2,\r\n            height: 2,\r\n        },\r\n        shadowOpacity: 0.25,\r\n        shadowRadius: 3.84,\r\n        elevation: 3,\r\n    }\r\n})\r\n\r\nexport default BcsTestTropics;"]},"metadata":{},"sourceType":"module"}